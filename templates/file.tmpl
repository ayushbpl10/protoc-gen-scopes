{{- define "File" -}}
// Code generated by protoc-gen-defaults. DO NOT EDIT.

package scopesval

import "fmt"
import "context"
import "google.golang.org/grpc/codes"
import "google.golang.org/grpc/status"
import "go.uber.org/fx"
import "go.appointy.com/google/pb/rights"
import "go.appointy.com/google/userinfo"
import "github.com/ayushbpl10/protoc-gen-rights/example/rights"



{{ range .Imports }}
import "{{ .}}"
{{ end }}


{{ range $service := .Services }}



    type Scopes{{$service.ServiceName}}Server struct {
        {{ .PackageName }}.{{$service.ServiceName}}Server
        rightsCli rights.ScopeValidatorsClient
        user right.UserIDer
    }

    func init() {
        options = append(options, fx.Provide(NewScopes{{$service.ServiceName}}Client))
    }

    type Scopes{{$service.ServiceName}}ClientResult struct {
        fx.Out
        {{$service.ServiceName}}Client {{ .PackageName }}.AcceptancesClient `name:"r"`
    }

    func NewScopes{{$service.ServiceName}}Client(c rights.ScopeValidatorsClient, s {{ .PackageName }}.{{$service.ServiceName}}Server) Scopes{{$service.ServiceName}}ClientResult {
        return Scopes{{$service.ServiceName}}ClientResult{ {{$service.ServiceName}}Client: {{ .PackageName }}.NewLocal{{$service.ServiceName}}Client(NewScopes{{$service.ServiceName}}Server(c, s))}
    }
    func NewScopes{{$service.ServiceName}}Server(c rights.ScopeValidatorsClient, s {{ .PackageName }}.{{$service.ServiceName}}Server, u right.UserIDer) {{ .PackageName }}.{{$service.ServiceName}}Server {
        return &Scopes{{$service.ServiceName}}Server{
            s,
            c,
            u,
        }
    }

    {{ range $rpc := $service.Rpcs }}
        func (s *Scopes{{$service.ServiceName}}Server) {{$rpc.RpcName}}(ctx context.Context, rightsvar *{{ $rpc.PackageName }}.{{$rpc.Input}}) ({{if eq $rpc.Output "Empty"}}*empty.{{$rpc.Output}}{{else}}*{{ $rpc.PackageName }}.{{$rpc.Output}}{{end}}, error) {

            ResourcePathOR := make([]string,0)

            ResourcePathOR = append(ResourcePath,

            {{range $resource := $rpc.Resources}}

                 "{{$resource.ResourceStringWithCurlyBraces}}",

            {{end}}

            )

            res, err := s.rightsCli.IsValid(ctx, &rights.IsValidReq{
                ResourcePathOR  :  ResourcePath,
                UserId          :  s.user.UserID(ctx),
                ModuleName      :  "{{$service.ServiceName}}",
            })
            if err != nil {
                return nil, err
            }


            if !res.IsValid {
                return nil, status.Errorf(codes.PermissionDenied, res.Reason)
            }
            return s.{{$service.ServiceName}}Server.{{.RpcName}}(ctx, rightsvar)
        }

    {{end}}
{{ end }}

{{end}}
